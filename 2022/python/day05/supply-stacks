#!/usr/bin/env python3

## Part 1 | Parsing ##
# Read first line of the file, count the total number of characters to
# determine how many stacks there are (a stack is 3 characters wide with
# one space inbetween).
# 20 characters wide (with line feed) = 20/4 stacks
# stack 1 is index 1
# stack 2 is index 5 (1 + 4)
# stack 3 is index 9 (1 + 4 + 4)
# stack 4 is index 13 (1 + 4 + 4 + 4)
# stack 5 is index 17 (1 + 4 + 4 + 4 + 4)
# Original  Plan:
# Iterate through the input string, if character matches /[A-Z]/
# determine the index & insert it into the dictionary key = ((index - 1) / 4) + 1)
# at index 0 (effectively prepending it).
# New Plan:
# Iterate through the input string by 4 places starting at index 1 (check only
# indexes which contain stacks) until the last stack (determined by the length
# of the input string).
# If character matches /[A-Z]/, determine which stack it's in & add it
# to the dictionary's item coresponding to the stack number.
# number of stacks = width/4, no need to add 1 to len(line) since
# the line ends in "\n"

# stacks = {
#   1: [],
#   2: [],
#   3: []
# }
# stacks = {
#   1: [],
#   2: ['D'], # stack = int(((line.index(crate) - 1) / 4) + 1); stacks[2].insert(0, crate)
#   3: []
# }
# stacks = {
#   1: ['N'],
#   2: ['C', 'D'], # list.insert(0, crate)
#   3: []
# }

import re

# Apparently constants should be uppercase?
FILE = 'input.txt'
DEBUG = False
VERBOSE = False

# For debugging.  I didn't like how pprint made long lists vertical.
def prettyprint(dictionary):
  for key in dictionary.keys():
    print(f"{key}: {dictionary[key]}")

# Initialize the stacks dictionary.  The keys represent the stacks,
# and the list values describe each stack.
def init_stacks(input_file):
  with open(input_file) as f:
    number_of_stacks = int(len(next(f)) / 4)
    new_stacks = {}
    for n in range(1, number_of_stacks + 1):
      new_stacks[n] = []
    return new_stacks

# Builds the map of the initial stacks based on the top of the input file.
# Initialize the stacks dictionary.  Iterate over the input string by the
# indexes of each stack.  If it contains a letter, prepend it to the
# the corresponding dictionary items list. When the line of input is just
# a line feed, return the map of stacks.
def build_map(input_file):
  map_stacks = init_stacks(input_file)
  with open(input_file) as f:
    for input_line in f:
      if VERBOSE or DEBUG:
        print(input_line)
      if input_line == "\n":
        break
      else:
        regex = re.compile('[A-Z]')
        for stack_index in range(1, len(input_line), 4):
          char = input_line[stack_index]
          if DEBUG:
            print("stack_index:", stack_index)
            print("char:", char)
          if regex.match(input_line[stack_index]):
            stack = int(((stack_index - 1) / 4) + 1)
            if DEBUG:
              print(f"Adding {char} to stack {stack}")
            map_stacks[stack].insert(0, char)
  if VERBOSE:
    prettyprint(map_stacks)
  return map_stacks


## Part 1 | Move Crates ##
# Figure out how to ignore stacks input & start processing the file after the
# first line consisting only of "\n".
# Maybe even using regex to match /^move/
# Use regex to parse instructions
# move (\d) from (\d) to (\d)
# Setup a counter (moves_remaining) based on 1st capture group.  Decrease that counter with
# every move.
# For each move, read last element from stack list identified by 2nd capture
# group & append it to the list identified by the 3rd capture group.
# When EOF is reached, iterate over each stack & copy the last element to a
# top_crates string variable then return that variable value.

def get_top_crates(stacks_dict):
  top_crates = ''
  for stack in stacks_dict.keys():
    if stacks_dict[stack][-1]:
      top_crates = top_crates + stacks_dict[stack][-1]
  return top_crates

def CrateMover9000(file, stacks_dict):
  with open(file) as input_file:
    regex = re.compile(r'^move (\d+) from (\d+) to (\d+)$')
    for line in input_file:
      instruction = regex.match(line)
      if instruction:
        moves_remaining = int(instruction.group(1))
        src_stack = int(instruction.group(2))
        dest_stack = int(instruction.group(3))
        if DEBUG:
          print(instruction)
          print(instruction.groups())
          print(f"src_stack == {src_stack}")
          print(f"dest_stack == {dest_stack}")
          print(f"stacks_dict[{src_stack}] == {stacks_dict[src_stack]}")
          print(f"stacks_dict[{dest_stack}] == {stacks_dict[dest_stack]}")
        while moves_remaining > 0:
          crate = stacks_dict[src_stack].pop()
          if DEBUG:
            print(f"moves_remaining == {moves_remaining}")
            print(f"crate = '{crate}'")
            print(f"stacks_dict[{src_stack}] = {stacks_dict[src_stack]}")

          stacks_dict[dest_stack].append(crate)
          if DEBUG:
            print(f"stacks_dict[{dest_stack}] = {stacks_dict[dest_stack]}")
          moves_remaining -= 1
          if DEBUG:
            print(f"new moves_remaining == {moves_remaining}")

  if VERBOSE:
    prettyprint(stacks_dict)
  return get_top_crates(stacks_dict)

# This time we can move more than 1 crate at a time.  For each instruction,
# split src_stack into two lists (remaining, moving) based on number of crates
# to move.  Overwrite src_stack with remaining & add moving to dest_stack.
# When EOF is reached
def CrateMover9001(file, stacks_dict):
  with open(file) as input_file:
    regex = re.compile(r'^move (\d+) from (\d+) to (\d+)$')
    for line in input_file:
      instruction = regex.match(line)
      if instruction:
        crates_to_move = int(instruction.group(1))
        src_stack = int(instruction.group(2))
        dest_stack = int(instruction.group(3))
        if DEBUG:
          print(instruction)
          print(instruction.groups())
          print(f"crates_to_move == {crates_to_move}")
          print(f"src_stack == {src_stack}")
          print(f"dest_stack == {dest_stack}")
          print(f"stacks_dict[{src_stack}] == {stacks_dict[src_stack]}")
          print(f"stacks_dict[{dest_stack}] == {stacks_dict[dest_stack]}")
        remaining = stacks_dict[src_stack][:-crates_to_move]
        moving = stacks_dict[src_stack][-crates_to_move:]
        if DEBUG:
          print(f"remaining == {remaining}")
          print(f"moving == {moving}")
        stacks_dict[src_stack] = remaining
        stacks_dict[dest_stack] = stacks_dict[dest_stack] + moving
        if DEBUG:
          print(f"new stacks_dict[{src_stack}] == {stacks_dict[src_stack]}")
          print(f"new stacks_dict[{dest_stack}] == {stacks_dict[dest_stack]}")

  if VERBOSE:
    prettyprint(stacks_dict)
  return get_top_crates(stacks_dict)


## Main ##
print(f"Part 1: {CrateMover9000(FILE, build_map(FILE))}")
print(f"Part 2: {CrateMover9001(FILE, build_map(FILE))}")
